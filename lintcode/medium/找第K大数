选择排序思路，做了一晚上，依然只得到Time Limit Exceeded

class Solution:
    # @param k & A a integer and an array
    # @return ans a integer
    def kthLargestElement(self, k, A):
        for i in range(0,len(A)-1):
            index=i
            for j in range(i+1,len(A)):
                if A[index]<A[j]:
                    index=j
            A[i],A[index]=A[index],A[i]
        
        return A[k-1]
                   
                
bubble sort
class Solution:
    # @param k & A a integer and an array
    # @return ans a integer
    def kthLargestElement(self, k, A):
        LEN=len(A)-1
        exchange=True
        while LEN>0 and exchange:
            exchange=False
            for i in range(LEN):
                if A[i]<A[i+1]:
                    exchange=True
                    A[i],A[i+1]=A[i+1],A[i]
            LEN=LEN-1
        return A[k-1]


insertion sort
class Solution:
    # @param k & A a integer and an array
    # @return ans a integer
    def kthLargestElement(self, k, A):
        for i in range(1,len(A)):
            if A[i]>A[i-1]:
                tmp=A[i]
                index=i
                while index>0 and A[index-1]<tmp:
                    A[index]=A[index-1]
                    index-=1
                A[index]=tmp
        return A[k-1]
        
insertion sort(折半)
class Solution:
    # @param k & A a integer and an array
    # @return ans a integer
    def kthLargestElement(self, k, A):
        for i in range(1,len(A)):
            current=A[i]
            index=i
            low=0
            high=index-1
            while low<=high:
                mid=(low+high)//2
                if A[mid]>current:
                    low=mid+1
                else:
                    high=mid-1
            while index>low:
                A[index]=A[index-1]
                index=index-1
            A[index]=current
        return A[k-1]
        
        
合并排序  终于AC了
class Solution:
    # @param k & A a integer and an array
    # @return ans a integer
    def kthLargestElement(self, k, A):
        S=self.merge_sort(A)
        return S[k-1]
        
    def merge_sort(self,A):
        if len(A)>1:
            mid=len(A)//2
            left=A[:mid]
            right=A[mid:]
            self.merge_sort(left)
            self.merge_sort(right)
            i=0;j=0;p=0
            while i<len(left) and j<len(right):
                if left[i]<right[j]:
                    A[p]=right[j]
                    j=j+1
                else:
                    A[p]=left[i]
                    i=i+1
                p=p+1
            while i<len(left):
                A[p]=left[i]
                i=i+1
                p=p+1
            while j<len(right):
                A[p]=right[j]
                j=j+1
                p=p+1
        return A
